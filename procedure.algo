
//dot product of two vector array. 

PROCEDURE dot_product(N1,N2 : INTEGER ,VAR v1 : ARRAY_OF INTEGER, VAR v2 : ARRAY_OF INTEGER)

VAR
      i,j :INTEGER;
      ps: INTEGER;
BEGIN

    // read the vectors
    
    FOR i FROM 0 TO N1-1 DO
            read(v1[i]);
    END FOR

    FOR i FROM 0 TO N2-1 DO
            read(v2[i]);
    END FOR
    
    // to do a dot scale v1 and v2 have to have the same length
    WHILE (N1==N2) DO

     // 2 Loops for to calculate the dot product 
        ps:=0;
        FOR i FROM 0 TO N1-1 DO
        FOR j FROM 0 TO N2-1 DO
       
            ps = ps + v1[i] * v2[j]; 
    
        END FOR
        END FOR
   
    END_WHILE
END

//checking if the 2 vectors are orthogonal with an algorithm
//by calling the previous procedure

ALGORITHM Check
VAR
   vect1 : ARRAY_OF type[10]; 
   vect2 : ARRAY_OF type[10];
   n: INTEGER;
BEGIN
    
FOR i FROM 0 TO N1-1 DO
    read(v1[i]);
END FOR

FOR i FROM 0 TO N2-1 DO
    read(v2[i]);
END FOR

WHILE (dot_product(vect1[n],vect2[n])==0) DO

write("they are orthogonal");

END_WHILE

END

//function that calculates the dot product

FUNCTION dot_product_function(n:INTEGER,VAR vect1:ARRAY OF INTEGER, VAR vect2: ARRAY OF INTEGER) : INTEGER
VAR
     vect1 : ARRAY_OF type[10]; 
     vect2 : ARRAY_OF type[10];
     i,j: INTEGER;
BEGIN
    FOR i FROM 0 TO N1-1 DO
        read(v1[i]);
    END FOR

    FOR i FROM 0 TO N2-1 DO
        read(v2[i]);
    END FOR
    WHILE (N1==N2) DO
        
   
        ps:=0;
        FOR i FROM 0 TO N1-1 DO
        FOR j FROM 0 TO N2-1 DO
       
            ps = ps + v1[i] * v2[j]; 
    
        END FOR
        END FOR

    END_WHILE
    
    RETURN ps ;
END

// algorithm that changes the procedure with a function

ALGORITHM check_function
VAR
   vect1 : ARRAY_OF type[10]; 
   vect2 : ARRAY_OF type[10];
   call,n,i,j: INTEGER;

BEGIN

    
call:= dot_product_function(vect1[n],vect2[n]);

WHILE (call==0) DO

    write("they are orthogonal");

END_WHILE

END